$NetBSD$

--- SConstruct.orig	2018-01-04 23:28:55.000000000 +0000
+++ SConstruct
@@ -886,6 +886,7 @@ envDict = dict(BUILD_ROOT=buildDir,
                INSTALL_DIR=installDir,
                CONFIG_HEADER_DEFINES={},
                LIBDEPS_TAG_EXPANSIONS=[],
+               ENV = os.environ,
                )
 
 env = Environment(variables=env_vars, **envDict)
@@ -1022,7 +1023,9 @@ def CheckForProcessor(context, which_arc
 os_macros = {
     "windows": "defined(_WIN32)",
     "solaris": "defined(__sun)",
+    "dragonfly": "defined(__DragonFly__)",
     "freebsd": "defined(__FreeBSD__)",
+    "netbsd": "defined(__NetBSD__)",
     "openbsd": "defined(__OpenBSD__)",
     "iOS": "defined(__APPLE__) && TARGET_OS_IOS && !TARGET_OS_SIMULATOR",
     "iOS-sim": "defined(__APPLE__) && TARGET_OS_IOS && TARGET_OS_SIMULATOR",
@@ -1389,7 +1392,7 @@ if env['_LIBDEPS'] == '$_LIBDEPS_LIBS':
     if not env.TargetOSIs('solaris', 'darwin', 'windows', 'openbsd'):
         env.Tool('thin_archive')
 
-if env.TargetOSIs('linux', 'freebsd', 'openbsd'):
+if env.TargetOSIs('linux', 'dragonfly', 'freebsd', 'netbsd', 'openbsd'):
     env['LINK_LIBGROUP_START'] = '-Wl,--start-group'
     env['LINK_LIBGROUP_END'] = '-Wl,--end-group'
     # NOTE: The leading and trailing spaces here are important. Do not remove them.
@@ -1423,10 +1426,24 @@ if env.TargetOSIs('linux'):
 elif env.TargetOSIs('solaris'):
      env.Append( LIBS=["socket","resolv","lgrp"] )
 
+elif os.sys.platform.startswith( "dragonfly" ):
+    env.Append( CPPPATH=[ "/data/include" ] )
+    env.Append( LIBPATH=[ "/data/lib" ] )
+    env.Append( LIBS=[ "m" ] )
+    env.Append( LIBS=[ "kvm" ] )
+    env.Append( CPPDEFINES=[ "__dragonfly__" ] )
+
 elif env.TargetOSIs('freebsd'):
     env.Append( LIBS=[ "kvm" ] )
     env.Append( CCFLAGS=[ "-fno-omit-frame-pointer" ] )
 
+elif os.sys.platform.startswith( "netbsd" ):
+    env.Append( CPPPATH=[ "/data/include" ] )
+    env.Append( LIBPATH=[ "/data/lib" ] )
+    env.Append( LIBS=[ "m" ] )
+    env.Append( LIBS=[ "kvm" ] )
+    env.Append( CPPDEFINES=[ "__netbsd__" ] )
+
 elif env.TargetOSIs('darwin'):
      env.Append( LIBS=["resolv"] )
 
@@ -1631,6 +1648,9 @@ if env.TargetOSIs('posix'):
             env.Append( CCFLAGS=["-Werror"] )
 
     env.Append( CXXFLAGS=["-Woverloaded-virtual"] )
+    env.Append( CPPDEFINES=["XP_UNIX=1"] )
+    env.Append( CXXFLAGS=os.environ['CXXFLAGS'] )
+    env.Append( LINKFLAGS=os.environ['LDFLAGS'] )
     if env.ToolchainIs('clang'):
         env.Append( CXXFLAGS=['-Werror=unused-result'] )
 
@@ -2236,9 +2256,9 @@ def doConfigure(myenv):
     if usingLibStdCxx:
         def CheckModernLibStdCxx(context):
             test_body = """
-            #if !__has_include(<experimental/filesystem>)
-            #error "libstdc++ from GCC 5.3.0 or newer is required"
-            #endif
+            //#if !__has_include(<experimental/filesystem>)
+            //#error "libstdc++ from GCC 5.3.0 or newer is required"
+            //#endif
             """
 
             context.Message('Checking for libstdc++ 5.3.0 or better... ')
@@ -2867,6 +2887,7 @@ def doConfigure(myenv):
     conf.env.Append(
         CPPDEFINES=[
             "BOOST_SYSTEM_NO_DEPRECATED",
+            "BOOST_OPTIONAL_USE_SINGLETON_DEFINITION_OF_NONE",
             "BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS",
         ]
     )
@@ -2919,7 +2940,7 @@ def doConfigure(myenv):
         myenv.ConfError("Couldn't find SASL header/libraries")
 
     # requires ports devel/libexecinfo to be installed
-    if env.TargetOSIs('freebsd', 'openbsd'):
+    if env.TargetOSIs('dragonfly', 'freebsd', 'netbsd', 'openbsd'):
         if not conf.CheckLib("execinfo"):
             myenv.ConfError("Cannot find libexecinfo, please install devel/libexecinfo.")
 
